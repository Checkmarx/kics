name: go-ci-integration

on:
  pull_request:
    branches: [master]

jobs:
  integration-tests:
    name: integration-tests
    runs-on: ubuntu-latest
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@f75f66ce1886f00957d99748a42c724f4330bdcf # v5.3.1
        with:
          cancel_others: false
          paths_ignore: '["docs/**", "**/**.md", "examples"]'
      - name: Check out code into the Go module directory
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
      - name: Cache Docker layers
        uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref }}
      - name: Get short SHA
        run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-8)" >> $GITHUB_ENV
      - name: Build
        id: docker_build
        uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v6.14.0
        with:
          load: true
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: false
          tags: kics:${{ github.sha }}
          build-args: |
            VERSION=${GITHUB_SHA_SHORT}
            COMMIT=${GITHUB_SHA}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Run docker image and generate results.json
        run: |
          docker run --user $(id -u):$(id -g) -v ${PWD}/assets/queries:/path \
            kics:${{ github.sha }} scan \
            --silent \
            --disable-full-descriptions \
            --ignore-on-exit "results" \
            --log-level DEBUG \
            --log-path "/path/info.log" \
            -p "/path" \
            -o "/path/"
      - name: Archive test logs
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: always()
        with:
          name: integration-logs-${{ github.event.pull_request.head.sha }}
          path: assets/queries/info.log
      - name: Display results
        run: |
          cat  ${PWD}/assets/queries/results.json
      - name: Archive test results
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: integration-results-${{ github.event.pull_request.head.sha }}
          path: assets/queries/results.json
      - name: Assert results.json
        run: |
          set -eo pipefail

          COUNT=$(jq '.queries_total' ${PWD}/assets/queries/results.json)
          echo "Assert queries_total > 0 in results.json :: ${COUNT}"
          echo $COUNT | xargs -i{} test {} -gt 0

          COUNT=$(jq '.total_counter' ${PWD}/assets/queries/results.json)
          echo "Assert total_counter > 0 in results.json :: ${COUNT}"
          echo $COUNT | xargs -i{} test {} -gt 0

          COUNT=$(jq '.files_scanned' ${PWD}/assets/queries/results.json)
          echo "Assert files_scanned > 0 in results.json :: ${COUNT}"
          echo $COUNT | xargs -i{} test {} -gt 0

          COUNT=$(jq '.queries_failed_to_execute' ${PWD}/assets/queries/results.json)
          echo "Assert queries_failed_to_execute == 0 in results.json :: ${COUNT}"
          echo $COUNT | xargs -i{} test {} -eq 0

          COUNT=$(jq '.files_failed_to_scan' ${PWD}/assets/queries/results.json)
          echo "Assert files_failed_to_scan == 0 in results.json :: ${COUNT}"
          echo $COUNT | xargs -i{} test {} -eq 0

name: goreleaser-scheduled

on:
  schedule:
  - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  pre_release_job:
    runs-on: ubuntu-latest
    outputs:
      commits: ${{ steps.sincelasttag.outputs.commits }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check if there are new commits since last nightly
        id: sincelasttag
        run: echo "::set-output name=commits=$(git log --oneline $(git describe --tags --match 'nightly' --abbrev=0)..HEAD)"
  goreleaser:
    needs: pre_release_job
    if: ${{ needs.pre_release_job.outputs.commits != "" }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Set short hash
        id: shorthash
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist --config="./.goreleaser-nightly.yml"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: delete release
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true # default: false
          tag_name: nightly # tag name to delete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          release_name: nightly-${{ steps.shorthash.outputs.sha8 }}
          draft: false
          prerelease: true
      - name: Display assets
        run: |
          ls -l /home/runner/work/kics/kics/dist
      - name: Upload Release Asset Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: /home/runner/work/kics/kics/dist/kics_nightly_linux_x64.tar.gz
          asset_name: kics_nightly-release_linux_amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Darwin
        id: upload-release-asset-darwin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: /home/runner/work/kics/kics/dist/kics_nightly_darwin_x64.tar.gz
          asset_name: kics_nightly-release_darwin_amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: /home/runner/work/kics/kics/dist/kics_nightly_windows_x64.zip
          asset_name: kics_nightly-release_windows_amd64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset Checksum
        id: upload-release-asset-checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: /home/runner/work/kics/kics/dist/kics_nightly_checksums.txt
          asset_name: kics_nightly-release_checksums.txt
          asset_content_type: text/plain
  push_to_registry:
    name: Push Docker image to Docker Hub
    needs: pre_release_job
    if: ${{ needs.pre_release_job.outputs.commits != "" }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push scratch to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: checkmarx/kics:nightly
          build-args: |
            VERSION=nightly-${{ steps.shorthash.outputs.sha8 }}
            COMMIT=${{ github.sha }}
      - name: Push alpine to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.integration
          push: true
          tags: checkmarx/kics:nightly-alpine
          build-args: |
            VERSION=nightly-${{ steps.shorthash.outputs.sha8 }}
            COMMIT=${{ github.sha }}

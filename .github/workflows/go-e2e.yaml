name: go-e2e

on:
  pull_request:
    branches: [master]

jobs:
  e2e-tests:
    name: e2e-tests
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
      - name: Set up Go 1.17.x
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Set up Node v14
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          persist-credentials: false
      - name: Install mock server
        run: npm ci
        working-directory: .github/scripts/server-mock
      - name: Start mock server
        run: (npm run start&)
        working-directory: .github/scripts/server-mock
      - name: Print go env
        run: go env
      - name: Get cache paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Cache dependencies
        uses: actions/cache@v2.1.7
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Build binary
        run: make build
      - name: Get Binary Path
        id: getbin
        run: |
          #!/usr/bin/env python3
          import os
          path = os.path.join(os.environ['GITHUB_WORKSPACE'], 'bin', 'kics')
          print(f"::set-output name=kics::{path}")
          queries_path = os.path.join(os.environ['GITHUB_WORKSPACE'], 'assets', 'queries')
          print(f"::set-output name=queries::{queries_path}")
        shell: python3 {0}
      - name: Run E2E Tests
        env:
          E2E_KICS_BINARY: ${{ steps.getbin.outputs.kics }}
          E2E_KICS_QUERIES_PATH: ${{ steps.getbin.outputs.queries }}
        run: |
          go test "github.com/Checkmarx/kics/e2e" -timeout 1500s -json > results.json
      - name: Generate E2E Report
        if: always()
        run: |
          CWD=$(pwd)
          cd .github/scripts/report
          go mod tidy
          go build
          ./e2e-report -test-path ${CWD} -test-name results.json -report-path ${CWD} -report-name e2e-report.html
      - name: Archive test report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: e2e-tests-${{ runner.os }}-${{ github.event.pull_request.head.sha }}
          path: e2e-report.html

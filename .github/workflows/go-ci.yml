
name: go-ci

on:
  pull_request:
    branches: [master]

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Go 1.16.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.x
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v2.5.2
      with:
        version: v1.37
        args: -c .golangci.yml
        skip-go-installation: true
  go-generate:
    name: go-generate
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.x
    - name: Check out code
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        fetch-depth: 0
    - name: Generate mocks and marshall/unmarshall code
      run: make generate
  unit-tests:
    name: unit-tests
    strategy:
      matrix:
        go-version: [1.16.x]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.9.0
      with:
        access_token: ${{ github.token }}
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        persist-credentials: false
    - name: Run Go mod tidy
      run: go mod tidy
    - name: Get cache paths
      id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Cache dependencies
      uses: actions/cache@v2.1.5
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-
    - name: Get go-junit-report module
      env:
        GO111MODULE: off
      run: |
        go get -u github.com/jstemmer/go-junit-report
    - name: Get Modules
      run: |
        go mod vendor
    - name: Test and Generate Report
      run: |
        set +o pipefail
        go test -mod=vendor -v ./... -count=1 -coverprofile cover.out 2>&1 | go-junit-report -set-exit-code -go-version ${{ matrix.go-version }} -package-name "github.com/Checkmarx/kics/test" > test-report-${{ matrix.os }}.xml
    - name: Archive unit tests report
      uses: actions/upload-artifact@v2
      with:
        name: unit-tests-report-${{ matrix.os }}-${{ github.event.pull_request.head.sha }}
        path: |
          test-report*.xml
  security-scan:
    name: security-scan
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif

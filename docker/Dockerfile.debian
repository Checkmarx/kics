#
# This image is here mainly to be used as a container agent for the Azure DevOps pipeline
# it does not define an ENTRYPOINT as this is a requirement described here:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops#linux-based-containers
#
FROM --platform=${BUILDPLATFORM:-linux/amd64} golang:1.22.4-bookworm as build_env
# Create a group and user
RUN groupadd checkmarx && useradd -g checkmarx -M -s /bin/bash checkmarx
USER checkmarx
# Copy the source from the current directory to the Working Directory inside the container
WORKDIR /app
ENV GOPRIVATE=github.com/Checkmarx/*
ARG VERSION="development"
ARG COMMIT="NOCOMMIT"
ARG SENTRY_DSN=""
ARG DESCRIPTIONS_URL=""
ARG TARGETOS
ARG TARGETARCH

#Copy go mod and sum files
COPY --chown=checkmarx:checkmarx go.mod .
COPY --chown=checkmarx:checkmarx go.sum .
# Get dependancies - will also be cached if we won't change mod/sum
RUN go mod download -x
# COPY the source code as the last step
COPY . .
USER root
# Build the Go app
RUN apt-get install -y ca-certificates
RUN CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build \
  -ldflags "-s -w -X github.com/Checkmarx/kics/v2/internal/constants.Version=${VERSION} -X github.com/Checkmarx/kics/v2/internal/constants.SCMCommit=${COMMIT} -X github.com/Checkmarx/kics/v2/internal/constants.SentryDSN=${SENTRY_DSN} -X github.com/Checkmarx/kics/v2/internal/constants.BaseURL=${DESCRIPTIONS_URL}" \
  -a -installsuffix cgo \
  -o bin/kics cmd/console/main.go

USER Checkmarx

# Healthcheck the container
HEALTHCHECK CMD wget -q --method=HEAD localhost/system-status.txt
#
# This image can be used as a container agent for the Azure DevOps pipeline
# be sure to use /app/bin/kics as a path to the binary
#
# runtime image
FROM debian:buster-slim

RUN groupadd checkmarx && useradd -g checkmarx -M -s /bin/bash checkmarx

ENV PATH /app/bin:/usr/bin/git:$PATH

RUN apt-get update -yq \
  && apt-get install git wget unzip zip jq -y \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

COPY --from=build_env /app/bin/kics /app/bin/kics
COPY --from=build_env /app/assets/queries /app/bin/assets/queries
COPY --from=build_env /app/assets/cwe_csv /app/bin/assets/cwe_csv
COPY --from=build_env /app/assets/libraries/* /app/bin/assets/libraries/

WORKDIR /app/bin

ENV PATH $PATH:/app/bin
# Healthcheck the container

HEALTHCHECK CMD wget -q --method=HEAD localhost/system-status.txt

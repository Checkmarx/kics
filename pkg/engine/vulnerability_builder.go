package engine

import (
	"encoding/json"
	"fmt"
	"regexp"
	"strconv"
	"strings"

	"github.com/Checkmarx/kics/pkg/model"
	"github.com/agnivade/levenshtein"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

var (
	nameRegex = regexp.MustCompile(`^([A-Za-z0-9-_]+)\[([A-Za-z0-9-_]+)]$`)
)

const (
	namePartsLength  = 3
	valuePartsLength = 2
)

var DefaultVulnerabilityBuilder = func(ctx QueryContext, v interface{}) (model.Vulnerability, error) {
	vOjb, ok := v.(map[string]interface{})
	if !ok {
		return model.Vulnerability{}, ErrInvalidResult
	}

	vOjb = mergeWithMetadata(vOjb, ctx.query.metadata.Metadata)

	output, err := json.Marshal(vOjb)
	if err != nil {
		return model.Vulnerability{}, errors.Wrap(err, "failed to marshall query output")
	}

	fileID, err := mapKeyToString(vOjb, "documentId", false)
	if err != nil {
		return model.Vulnerability{}, errors.Wrap(err, "failed to recognize file id")
	}

	file, ok := ctx.files[*fileID]
	if !ok {
		return model.Vulnerability{}, errors.New("failed to find file from query response")
	}

	logWithFields := log.With().
		Str("scanID", ctx.scanID).
		Str("fileID", file.ID).
		Str("queryName", ctx.query.metadata.Query).
		Logger()

	line := UndetectedVulnerabilityLine
	searchKey := ""
	if s, ok := vOjb["searchKey"]; ok {
		searchKey = s.(string)
		line = detectLine(ctx, &file, searchKey)
	} else {
		logWithFields.Warn().Msg("saving result. failed to detect line")
	}

	queryName := DefaultQueryName
	if qn, err := mapKeyToString(vOjb, "queryName", false); err == nil {
		queryName = *qn
	} else {
		logWithFields.Warn().Msg("saving result. failed to detect query name")
	}

	queryID := DefaultQueryID
	if qn, err := mapKeyToString(vOjb, "id", false); err == nil {
		queryID = *qn
	} else {
		logWithFields.Warn().Msg("saving result. failed to detect query id")
	}

	var severity model.Severity = model.SeverityInfo
	if s, err := mapKeyToString(vOjb, "severity", false); err == nil {
		su := strings.ToUpper(*s)
		var found bool
		for _, si := range model.AllSeverities {
			if su == string(si) {
				severity = si
				found = true
				break
			}
		}

		if !found {
			logWithFields.Warn().Str("severity", *s).Msg("saving result. invalid severity constant value")
		}
	} else {
		logWithFields.Info().Msg("saving result. failed to detect severity")
	}

	issueType := DefaultIssueType
	if v := mustMapKeyToString(vOjb, "issueType"); v != nil {
		issueType = model.IssueType(*v)
	}

	return model.Vulnerability{
		ID:               0,
		ScanID:           ctx.scanID,
		FileID:           file.ID,
		FileName:         file.FileName,
		QueryName:        queryName,
		QueryID:          queryID,
		Severity:         severity,
		Line:             line,
		IssueType:        issueType,
		SearchKey:        searchKey,
		KeyExpectedValue: ptrStringToString(mustMapKeyToString(vOjb, "keyExpectedValue")),
		KeyActualValue:   ptrStringToString(mustMapKeyToString(vOjb, "keyActualValue")),
		Value:            mustMapKeyToString(vOjb, "value"),
		Output:           string(output),
	}, nil
}

func mergeWithMetadata(base, additional map[string]interface{}) map[string]interface{} {
	for k, v := range additional {
		if _, ok := base[k]; ok {
			continue
		}

		base[k] = v
	}

	return base
}

func detectLine(ctx QueryContext, file *model.FileMetadata, searchKey string) int {
	lines := strings.Split(file.OriginalData, "\n")
	foundAtLeastOne := false
	currentLine := 0

	for _, key := range strings.Split(searchKey, ".") {
		var substr1, substr2 string
		distances := make(map[int]int)
		if parts := nameRegex.FindStringSubmatch(key); len(parts) == namePartsLength {
			substr1 = parts[1]
			substr2 = parts[2]
		} else if parts := strings.Split(key, "="); len(parts) == valuePartsLength {
			substr1 = parts[0]
			substr2 = parts[1]
		} else {
			substr1 = key
		}

		for i := currentLine; i < len(lines); i++ {
			if substr1 != "" && substr2 != "" {
				if strings.Contains(lines[i], substr1) && strings.Contains(lines[i], substr2) {
					distances[i] = levenshtein.ComputeDistance(extractLineFragment(lines[i], substr2), substr2)
				}
			} else if substr1 != "" {
				if strings.Contains(lines[i], substr1) {
					distances[i] = levenshtein.ComputeDistance(extractLineFragment(lines[i], substr1), substr1)
				}
			}
		}

		if len(distances) == 0 {
			break
		}

		foundAtLeastOne = true
		currentLine = selectLineWithMinimumDistance(distances, currentLine)
	}

	if foundAtLeastOne {
		return currentLine + 1
	}

	log.Warn().
		Str("scanID", ctx.scanID).
		Str("fileID", file.ID).
		Msgf("failed to detect line, query response %s", searchKey)

	return UndetectedVulnerabilityLine
}

func selectLineWithMinimumDistance(distances map[int]int, startingFrom int) int {
	minDistance, lineOfMinDistance := 1000000000000, startingFrom
	for line, distance := range distances {
		if distance < minDistance {
			minDistance = distance
			lineOfMinDistance = line
		} else if distance == minDistance && line < lineOfMinDistance { // taking first line with minimum distance
			minDistance = distance
			lineOfMinDistance = line
		}
	}

	return lineOfMinDistance
}

func extractLineFragment(line, substr string) string {
	start := strings.Index(line, substr)
	end := start + len(substr)

	for start >= 0 {
		if line[start] == ' ' {
			break
		}

		start--
	}

	for end < len(line) {
		if line[end] == ' ' {
			break
		}

		end++
	}

	return line[start+1 : end]
}

func mustMapKeyToString(m map[string]interface{}, key string) *string {
	res, err := mapKeyToString(m, key, true)
	if err != nil && key != "value" {
		log.Warn().
			Str("reason", err.Error()).
			Msgf("failed to get key %s in map", key)
	}

	return res
}

func mapKeyToString(m map[string]interface{}, key string, allowNil bool) (*string, error) {
	v, ok := m[key]
	if !ok {
		return nil, fmt.Errorf("key '%s' not found in map", key)
	}

	switch vv := v.(type) {
	case json.Number:
		return stringToPtrString(vv.String()), nil
	case string:
		return stringToPtrString(vv), nil
	case int, int32, int64:
		return stringToPtrString(fmt.Sprintf("%d", vv)), nil
	case float32:
		return stringToPtrString(strconv.FormatFloat(float64(vv), 'f', -1, 64)), nil
	case float64:
		return stringToPtrString(strconv.FormatFloat(vv, 'f', -1, 64)), nil
	case nil:
		if allowNil {
			return nil, nil
		}
		return stringToPtrString("null"), nil
	case bool:
		return stringToPtrString(fmt.Sprintf("%v", vv)), nil
	}

	log.Debug().
		Msg("detecting line. can't format item to string")

	if allowNil {
		return nil, nil
	}

	return stringToPtrString(""), nil
}

func stringToPtrString(v string) *string {
	return &v
}

func ptrStringToString(v *string) string {
	if v == nil {
		return ""
	}
	return *v
}

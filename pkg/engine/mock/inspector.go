// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/engine/inspector.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/Checkmarx/kics/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockQueriesSource is a mock of QueriesSource interface
type MockQueriesSource struct {
	ctrl     *gomock.Controller
	recorder *MockQueriesSourceMockRecorder
}

// MockQueriesSourceMockRecorder is the mock recorder for MockQueriesSource
type MockQueriesSourceMockRecorder struct {
	mock *MockQueriesSource
}

// NewMockQueriesSource creates a new mock instance
func NewMockQueriesSource(ctrl *gomock.Controller) *MockQueriesSource {
	mock := &MockQueriesSource{ctrl: ctrl}
	mock.recorder = &MockQueriesSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueriesSource) EXPECT() *MockQueriesSourceMockRecorder {
	return m.recorder
}

// GetQueries mocks base method
func (m *MockQueriesSource) GetQueries() ([]model.QueryMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueries")
	ret0, _ := ret[0].([]model.QueryMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueries indicates an expected call of GetQueries
func (mr *MockQueriesSourceMockRecorder) GetQueries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueries", reflect.TypeOf((*MockQueriesSource)(nil).GetQueries))
}

// GetQueries mocks base method
func (m *MockQueriesSource) GetGenericQuery(platform string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenericQuery", platform)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueries indicates an expected call of GetQueries
func (mr *MockQueriesSourceMockRecorder) GetGenericQuery(platform string) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenericQuery", reflect.TypeOf((*MockQueriesSource)(nil).GetGenericQuery), platform)
}

// MockFilesStorage is a mock of FilesStorage interface
type MockFilesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFilesStorageMockRecorder
}

// MockFilesStorageMockRecorder is the mock recorder for MockFilesStorage
type MockFilesStorageMockRecorder struct {
	mock *MockFilesStorage
}

// NewMockFilesStorage creates a new mock instance
func NewMockFilesStorage(ctrl *gomock.Controller) *MockFilesStorage {
	mock := &MockFilesStorage{ctrl: ctrl}
	mock.recorder = &MockFilesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilesStorage) EXPECT() *MockFilesStorageMockRecorder {
	return m.recorder
}

// GetFiles mocks base method
func (m *MockFilesStorage) GetFiles(ctx context.Context, scanID string) (model.FileMetadatas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", ctx, scanID)
	ret0, _ := ret[0].(model.FileMetadatas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles
func (mr *MockFilesStorageMockRecorder) GetFiles(ctx, scanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockFilesStorage)(nil).GetFiles), ctx, scanID)
}

// SaveVulnerabilities mocks base method
func (m *MockFilesStorage) SaveVulnerabilities(ctx context.Context, vulnerabilities []model.Vulnerability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVulnerabilities", ctx, vulnerabilities)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVulnerabilities indicates an expected call of SaveVulnerabilities
func (mr *MockFilesStorageMockRecorder) SaveVulnerabilities(ctx, vulnerabilities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVulnerabilities", reflect.TypeOf((*MockFilesStorage)(nil).SaveVulnerabilities), ctx, vulnerabilities)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/engine/inspector.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/Checkmarx/kics/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockQueriesSource is a mock of QueriesSource interface.
type MockQueriesSource struct {
	ctrl     *gomock.Controller
	recorder *MockQueriesSourceMockRecorder
}

// MockQueriesSourceMockRecorder is the mock recorder for MockQueriesSource.
type MockQueriesSourceMockRecorder struct {
	mock *MockQueriesSource
}

// NewMockQueriesSource creates a new mock instance.
func NewMockQueriesSource(ctrl *gomock.Controller) *MockQueriesSource {
	mock := &MockQueriesSource{ctrl: ctrl}
	mock.recorder = &MockQueriesSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueriesSource) EXPECT() *MockQueriesSourceMockRecorder {
	return m.recorder
}

// GetGenericQuery mocks base method.
func (m *MockQueriesSource) GetGenericQuery(platform string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenericQuery", platform)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenericQuery indicates an expected call of GetGenericQuery.
func (mr *MockQueriesSourceMockRecorder) GetGenericQuery(platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenericQuery", reflect.TypeOf((*MockQueriesSource)(nil).GetGenericQuery), platform)
}

// GetQueries mocks base method.
func (m *MockQueriesSource) GetQueries(excludeQueries []string) ([]model.QueryMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueries", excludeQueries)
	ret0, _ := ret[0].([]model.QueryMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueries indicates an expected call of GetQueries.
func (mr *MockQueriesSourceMockRecorder) GetQueries(excludeQueries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueries", reflect.TypeOf((*MockQueriesSource)(nil).GetQueries), excludeQueries)
}

// MockTracker is a mock of Tracker interface.
type MockTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerMockRecorder
}

// MockTrackerMockRecorder is the mock recorder for MockTracker.
type MockTrackerMockRecorder struct {
	mock *MockTracker
}

// NewMockTracker creates a new mock instance.
func NewMockTracker(ctrl *gomock.Controller) *MockTracker {
	mock := &MockTracker{ctrl: ctrl}
	mock.recorder = &MockTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracker) EXPECT() *MockTrackerMockRecorder {
	return m.recorder
}

// FailedComputeSimilarityID mocks base method.
func (m *MockTracker) FailedComputeSimilarityID() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FailedComputeSimilarityID")
}

// FailedComputeSimilarityID indicates an expected call of FailedComputeSimilarityID.
func (mr *MockTrackerMockRecorder) FailedComputeSimilarityID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailedComputeSimilarityID", reflect.TypeOf((*MockTracker)(nil).FailedComputeSimilarityID))
}

// FailedDetectLine mocks base method.
func (m *MockTracker) FailedDetectLine() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FailedDetectLine")
}

// FailedDetectLine indicates an expected call of FailedDetectLine.
func (mr *MockTrackerMockRecorder) FailedDetectLine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailedDetectLine", reflect.TypeOf((*MockTracker)(nil).FailedDetectLine))
}

// TrackQueryExecution mocks base method.
func (m *MockTracker) TrackQueryExecution(queryAggregation int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackQueryExecution", queryAggregation)
}

// TrackQueryExecution indicates an expected call of TrackQueryExecution.
func (mr *MockTrackerMockRecorder) TrackQueryExecution(queryAggregation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackQueryExecution", reflect.TypeOf((*MockTracker)(nil).TrackQueryExecution), queryAggregation)
}

// TrackQueryLoad mocks base method.
func (m *MockTracker) TrackQueryLoad(queryAggregation int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackQueryLoad", queryAggregation)
}

// TrackQueryLoad indicates an expected call of TrackQueryLoad.
func (mr *MockTrackerMockRecorder) TrackQueryLoad(queryAggregation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackQueryLoad", reflect.TypeOf((*MockTracker)(nil).TrackQueryLoad), queryAggregation)
}

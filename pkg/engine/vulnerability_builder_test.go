package engine

import (
	"encoding/json"
	"reflect"
	"strings"
	"testing"

	"github.com/Checkmarx/kics/v2/internal/tracker"
	"github.com/Checkmarx/kics/v2/pkg/detector"
	"github.com/Checkmarx/kics/v2/pkg/model"
	"github.com/Checkmarx/kics/v2/pkg/utils"
	"github.com/stretchr/testify/require"
)

type vbArgs struct {
	ctx     *QueryContext
	v       interface{}
	tracker Tracker
}

var vbTests = []struct {
	name                string
	args                vbArgs
	want                model.Vulnerability
	useNewVulnerability bool
	wantErr             bool
	kicsComputeNewSimID bool
}{
	{
		name: "DefaultVulnerabilityBuilderWithOldSimId",
		args: vbArgs{
			tracker: &tracker.CITracker{},
			ctx: &QueryContext{
				scanID: "ScanID",
				Query: &PreparedQuery{
					Metadata: model.QueryMetadata{
						Metadata: map[string]interface{}{
							"key":         "123",
							"severity":    model.SeverityInfo,
							"oldSeverity": model.SeverityCritical,
							"issueType":   "IncorrectValue",
							"searchKey":   "testSearchKey",
						},
						Query: "TestQuery",
						CWE:   "",
					},
				},
				Files: map[string]model.FileMetadata{
					"testV": {LinesOriginalData: &[]string{}},
				},
			},
			v: map[string]interface{}{
				"documentId": "testV",
			},
		},
		want: model.Vulnerability{
			ID:               0,
			SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			OldSimilarityID:  "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			ScanID:           "ScanID",
			FileID:           "",
			FileName:         "",
			DescriptionID:    "Undefined",
			CWE:              "",
			QueryID:          "Undefined",
			QueryName:        "Anonymous",
			QueryURI:         "https://github.com/Checkmarx/kics/",
			Severity:         model.SeverityInfo,
			Line:             1,
			SearchLine:       -1,
			VulnLines:        &[]model.CodeLine{},
			IssueType:        "IncorrectValue",
			SearchKey:        "testSearchKey",
			KeyActualValue:   "",
			KeyExpectedValue: "",
			Value:            nil,
			Output:           `{"documentId":"testV","issueType":"IncorrectValue","key":"123","oldSeverity":"CRITICAL","searchKey":"testSearchKey","severity":"INFO"}`,
		},
		wantErr:             false,
		kicsComputeNewSimID: true,
	},
	{
		name: "DefaultVulnerabilityBuilderWithoutOldSimId",
		args: vbArgs{
			tracker: &tracker.CITracker{},
			ctx: &QueryContext{
				scanID: "ScanID",
				Query: &PreparedQuery{
					Metadata: model.QueryMetadata{
						Metadata: map[string]interface{}{
							"key":         "123",
							"severity":    model.SeverityInfo,
							"oldSeverity": model.SeverityCritical,
							"issueType":   "IncorrectValue",
							"searchKey":   "testSearchKey",
						},
						Query: "TestQuery",
						CWE:   "",
					},
				},
				Files: map[string]model.FileMetadata{
					"testV": {LinesOriginalData: &[]string{}},
				},
			},
			v: map[string]interface{}{
				"documentId": "testV",
			},
		},
		want: model.Vulnerability{
			ID:               0,
			SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			OldSimilarityID:  "",
			ScanID:           "ScanID",
			FileID:           "",
			FileName:         "",
			DescriptionID:    "Undefined",
			CWE:              "",
			QueryID:          "Undefined",
			QueryName:        "Anonymous",
			QueryURI:         "https://github.com/Checkmarx/kics/",
			Severity:         model.SeverityInfo,
			Line:             1,
			SearchLine:       -1,
			VulnLines:        &[]model.CodeLine{},
			IssueType:        "IncorrectValue",
			SearchKey:        "testSearchKey",
			KeyActualValue:   "",
			KeyExpectedValue: "",
			Value:            nil,
			Output:           `{"documentId":"testV","issueType":"IncorrectValue","key":"123","oldSeverity":"CRITICAL","searchKey":"testSearchKey","severity":"INFO"}`,
		},
		wantErr:             false,
		kicsComputeNewSimID: false,
	},
	{
		name: "DefaultVulnerabilityBuilder with override for severity and old sim id",
		args: vbArgs{
			tracker: &tracker.CITracker{},
			ctx: &QueryContext{
				scanID: "ScanID",
				Query: &PreparedQuery{
					Metadata: model.QueryMetadata{
						Metadata: map[string]interface{}{
							"key":         "123",
							"severity":    model.SeverityInfo,
							"issueType":   "IncorrectValue",
							"searchKey":   "testSearchKey",
							"overrideKey": "testOverride",
							"override": map[string]interface{}{
								"testOverride": map[string]interface{}{
									"severity": model.SeverityHigh,
								},
							},
						},
						Query: "TestQuery",
						CWE:   "",
					},
				},
				Files: map[string]model.FileMetadata{
					"testV": {LinesOriginalData: &[]string{}},
				},
			},
			v: map[string]interface{}{
				"documentId": "testV",
			},
		},
		want: model.Vulnerability{
			ID:               0,
			SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			OldSimilarityID:  "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			ScanID:           "ScanID",
			FileID:           "",
			FileName:         "",
			DescriptionID:    "Undefined",
			CWE:              "",
			QueryID:          "Undefined",
			QueryName:        "Anonymous",
			QueryURI:         "https://github.com/Checkmarx/kics/",
			Severity:         model.SeverityHigh,
			Line:             1,
			SearchLine:       -1,
			VulnLines:        &[]model.CodeLine{},
			IssueType:        "IncorrectValue",
			SearchKey:        "testSearchKey",
			KeyActualValue:   "",
			KeyExpectedValue: "",
			Value:            nil,
			Output:           `{"documentId":"testV","issueType":"IncorrectValue","key":"123","override":{"testOverride":{"severity":"HIGH"}},"overrideKey":"testOverride","searchKey":"testSearchKey","severity":"INFO"}`, //nolint
		},
		wantErr:             false,
		kicsComputeNewSimID: true,
	},
	{
		name: "DefaultVulnerabilityBuilder with override for severity and without old sim id",
		args: vbArgs{
			tracker: &tracker.CITracker{},
			ctx: &QueryContext{
				scanID: "ScanID",
				Query: &PreparedQuery{
					Metadata: model.QueryMetadata{
						Metadata: map[string]interface{}{
							"key":         "123",
							"severity":    model.SeverityInfo,
							"issueType":   "IncorrectValue",
							"searchKey":   "testSearchKey",
							"overrideKey": "testOverride",
							"override": map[string]interface{}{
								"testOverride": map[string]interface{}{
									"severity": model.SeverityHigh,
								},
							},
						},
						Query: "TestQuery",
						CWE:   "",
					},
				},
				Files: map[string]model.FileMetadata{
					"testV": {LinesOriginalData: &[]string{}},
				},
			},
			v: map[string]interface{}{
				"documentId": "testV",
			},
		},
		want: model.Vulnerability{
			ID:               0,
			SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			OldSimilarityID:  "",
			ScanID:           "ScanID",
			FileID:           "",
			FileName:         "",
			DescriptionID:    "Undefined",
			CWE:              "",
			QueryID:          "Undefined",
			QueryName:        "Anonymous",
			QueryURI:         "https://github.com/Checkmarx/kics/",
			Severity:         model.SeverityHigh,
			Line:             1,
			SearchLine:       -1,
			VulnLines:        &[]model.CodeLine{},
			IssueType:        "IncorrectValue",
			SearchKey:        "testSearchKey",
			KeyActualValue:   "",
			KeyExpectedValue: "",
			Value:            nil,
			Output:           `{"documentId":"testV","issueType":"IncorrectValue","key":"123","override":{"testOverride":{"severity":"HIGH"}},"overrideKey":"testOverride","searchKey":"testSearchKey","severity":"INFO"}`, //nolint
		},
		wantErr:             false,
		kicsComputeNewSimID: false,
	},
	{
		name: "DefaultVulnerabilityBuilder with override for name",
		args: vbArgs{
			tracker: &tracker.CITracker{},
			ctx: &QueryContext{
				scanID: "ScanID",
				Query: &PreparedQuery{
					Metadata: model.QueryMetadata{
						Metadata: map[string]interface{}{
							"key":         "123",
							"severity":    model.SeverityInfo,
							"issueType":   "IncorrectValue",
							"searchKey":   "testSearchKey",
							"overrideKey": "testOverride",
							"queryName":   "test",
							"override": map[string]interface{}{
								"testOverride": map[string]interface{}{
									"queryName": "testName",
								},
							},
						},
						Query: "TestQuery",
						CWE:   "",
					},
				},
				Files: map[string]model.FileMetadata{
					"testV": {LinesOriginalData: &[]string{}},
				},
			},
			v: map[string]interface{}{
				"documentId": "testV",
			},
		},
		want: model.Vulnerability{
			ID:               0,
			SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			OldSimilarityID:  "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			ScanID:           "ScanID",
			FileID:           "",
			FileName:         "",
			DescriptionID:    "Undefined",
			CWE:              "",
			QueryID:          "Undefined",
			QueryName:        "testName",
			QueryURI:         "https://github.com/Checkmarx/kics/",
			Severity:         model.SeverityInfo,
			Line:             1,
			SearchLine:       -1,
			VulnLines:        &[]model.CodeLine{},
			IssueType:        "IncorrectValue",
			SearchKey:        "testSearchKey",
			KeyActualValue:   "",
			KeyExpectedValue: "",
			Value:            nil,
			Output:           `{"documentId":"testV","issueType":"IncorrectValue","key":"123","override":{"testOverride":{"queryName":"testName"}},"overrideKey":"testOverride","queryName":"test","searchKey":"testSearchKey","severity":"INFO"}`, //nolint
		},
		wantErr:             false,
		kicsComputeNewSimID: true,
	},
	{
		name: "DefaultVulnerabilityBuilder with new Severity",
		args: vbArgs{
			tracker: &tracker.CITracker{},
			ctx: &QueryContext{
				scanID: "ScanID",
				Query: &PreparedQuery{
					Metadata: model.QueryMetadata{
						Metadata: map[string]interface{}{
							"key":         "123",
							"severity":    model.SeverityInfo,
							"oldSeverity": model.SeverityCritical,
							"issueType":   "IncorrectValue",
							"searchKey":   "testSearchKey",
							"queryName":   "testName",
						},
						Query: "TestQuery",
						CWE:   "",
					},
				},
				Files: map[string]model.FileMetadata{
					"testV": {LinesOriginalData: &[]string{}},
				},
			},
			v: map[string]interface{}{
				"documentId": "testV",
			},
		},
		useNewVulnerability: true,
		want: model.Vulnerability{
			ID:               0,
			SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			OldSimilarityID:  "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			ScanID:           "ScanID",
			FileID:           "",
			FileName:         "",
			DescriptionID:    "Undefined",
			CWE:              "",
			QueryID:          "Undefined",
			QueryName:        "testName",
			QueryURI:         "https://github.com/Checkmarx/kics/",
			Severity:         model.SeverityCritical,
			Line:             1,
			SearchLine:       -1,
			VulnLines:        &[]model.CodeLine{},
			IssueType:        "IncorrectValue",
			SearchKey:        "testSearchKey",
			KeyActualValue:   "",
			KeyExpectedValue: "",
			Value:            nil,
			Output:           `{"documentId":"testV","issueType":"IncorrectValue","key":"123","oldSeverity":"CRITICAL","queryName":"testName","searchKey":"testSearchKey","severity":"INFO"}`, //nolint
		},
		wantErr:             false,
		kicsComputeNewSimID: true,
	},
	{
		name: "DefaultVulnerabilityBuilder with override for platform and cloud provider",
		args: vbArgs{
			tracker: &tracker.CITracker{},
			ctx: &QueryContext{
				scanID: "ScanID",
				Query: &PreparedQuery{
					Metadata: model.QueryMetadata{
						Metadata: map[string]interface{}{
							"key":           "123",
							"severity":      model.SeverityInfo,
							"oldSeverity":   model.SeverityCritical,
							"issueType":     "IncorrectValue",
							"searchKey":     "testSearchKey",
							"platform":      "CICD",
							"cloudProvider": "common",
						},
						Query: "TestQuery",
						CWE:   "",
					},
				},
				Files: map[string]model.FileMetadata{
					"testV": {LinesOriginalData: &[]string{}},
				},
			},
			v: map[string]interface{}{
				"documentId": "testV",
			},
		},
		want: model.Vulnerability{
			ID:               0,
			SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			OldSimilarityID:  "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			ScanID:           "ScanID",
			FileID:           "",
			FileName:         "",
			DescriptionID:    "Undefined",
			CWE:              "",
			QueryID:          "Undefined",
			QueryName:        "Anonymous",
			QueryURI:         "https://github.com/Checkmarx/kics/",
			Severity:         model.SeverityInfo,
			Line:             1,
			SearchLine:       -1,
			VulnLines:        &[]model.CodeLine{},
			IssueType:        "IncorrectValue",
			SearchKey:        "testSearchKey",
			KeyActualValue:   "",
			KeyExpectedValue: "",
			Platform:         "CICD",
			CloudProvider:    "common",
			Value:            nil,
			Output:           `{"cloudProvider":"common","documentId":"testV","issueType":"IncorrectValue","key":"123","oldSeverity":"CRITICAL","platform":"CICD","searchKey":"testSearchKey","severity":"INFO"}`,
		},
		wantErr:             false,
		kicsComputeNewSimID: true,
	},
}

// TestDefaultVulnerabilityBuilder tests the functions [DefaultVulnerabilityBuilder] and all the methods called by them
func TestDefaultVulnerabilityBuilder(t *testing.T) {
	for _, tt := range vbTests {
		insDetector := detector.NewDetectLine(3)
		t.Run(tt.name, func(t *testing.T) {
			got, err := DefaultVulnerabilityBuilder(tt.args.ctx, tt.args.tracker, tt.args.v, insDetector, tt.useNewVulnerability, tt.kicsComputeNewSimID)
			if (err != nil) != tt.wantErr {
				t.Errorf("test[%s] DefaultVulnerabilityBuilder() error %v, wantErr %v", tt.name, err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, &tt.want) {
				var gotJSON, wantJSON []byte
				gotJSON, err := json.Marshal(got)
				require.NoError(t, err)
				wantJSON, err = json.Marshal(tt.want)
				require.NoError(t, err)
				t.Errorf("test[%s] DefaultVulnerabilityBuilder() got = %v,\n want = %v", tt.name, string(gotJSON), string(wantJSON))
			}
		})
	}
}

var OriginalData = `{
	"father": {
		"son": {
			"grandson": "value"
		}
	}
}`

func TestEngine_calculate(t *testing.T) { //nolint
	type fields struct {
		lineNr               int
		vObj                 map[string]interface{}
		file                 model.FileMetadata
		detector             *detector.DetectLine
		similarityIDLineInfo string
		linesVulne           model.VulnerabilityLines
	}
	tests := []struct {
		name           string
		fields         fields
		wantLine       int
		wantLinesVulne model.VulnerabilityLines
		wantSimID      string
	}{
		{
			name: "should have default values",
			fields: fields{
				lineNr: -1,
				vObj: map[string]interface{}{
					"no_search_line": "",
				},
				file:                 model.FileMetadata{LinesOriginalData: &[]string{}},
				detector:             &detector.DetectLine{},
				similarityIDLineInfo: "should be default",
				linesVulne: model.VulnerabilityLines{
					Line:                  5,
					LineWithVulnerability: "this line",
					VulnLines:             &[]model.CodeLine{},
				},
			},
			wantLine: -1,
			wantLinesVulne: model.VulnerabilityLines{
				Line:                  5,
				LineWithVulnerability: "this line",
				VulnLines:             &[]model.CodeLine{},
			},
			wantSimID: "should be default",
		},
		{
			name: "should change values",
			fields: fields{
				lineNr: -1,
				vObj: map[string]interface{}{
					"searchLine": []interface{}{"father", "son", "grandson"},
				},
				file: model.FileMetadata{
					LineInfoDocument: map[string]interface{}{
						"_kics_lines": map[string]interface{}{
							"_kics__default": map[string]interface{}{
								"_kics_line": 0,
							},
							"_kics_father": map[string]interface{}{
								"_kics_line": 3,
							},
						},
						"father": map[string]interface{}{
							"_kics_lines": map[string]interface{}{
								"_kics__default": map[string]interface{}{
									"_kics_line": 3,
								},
								"_kics_son": map[string]interface{}{
									"_kics_line": 4,
								},
							},
							"son": map[string]interface{}{
								"_kics_lines": map[string]interface{}{
									"_kics__default": map[string]interface{}{
										"_kics_line": 4,
									},
									"_kics_grandson": map[string]interface{}{
										"_kics_line": 5,
									},
								},
								"grandson": "value",
							},
						},
					},
					OriginalData:      OriginalData,
					LinesOriginalData: utils.SplitLines(OriginalData),
				},
				detector:             detector.NewDetectLine(3),
				similarityIDLineInfo: "should be default",
				linesVulne: model.VulnerabilityLines{
					Line:                  2,
					LineWithVulnerability: "this line",
					VulnLines:             &[]model.CodeLine{},
				},
			},
			wantLine: 5,
			wantLinesVulne: model.VulnerabilityLines{
				Line: 5,
				VulnLines: &[]model.CodeLine{
					{
						Position: 4, Line: "\t\t\t\"grandson\": \"value\"",
					},
					{
						Position: 5, Line: "\t\t}",
					},
					{
						Position: 6, Line: "\t}",
					},
				},
				LineWithVulnerability: "",
			},
			wantSimID: "5",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			testCalc := &searchLineCalculator{
				lineNr:               tt.fields.lineNr,
				vObj:                 tt.fields.vObj,
				file:                 tt.fields.file,
				detector:             tt.fields.detector,
				similarityIDLineInfo: tt.fields.similarityIDLineInfo,
				linesVulne:           tt.fields.linesVulne,
			}
			testCalc.calculate()
			require.Equal(t, tt.wantLine, testCalc.lineNr)
			require.Equal(t, tt.wantLinesVulne, testCalc.linesVulne)
			require.Equal(t, tt.wantSimID, testCalc.similarityIDLineInfo)
		})
	}
}

func TestSanitize(t *testing.T) {
	tests := []struct {
		searchKey string
		wantStr   string
	}{
		{
			searchKey: "all.children.tower",
			wantStr:   "[tower]",
		},
		{
			searchKey: "all.children.defaults.hosts",
			wantStr:   "[defaults]",
		},
		{
			searchKey: "all.children.galaxy.hosts.galaxy_server",
			wantStr:   "[galaxy].galaxy_server",
		},
		{
			searchKey: "all.children",
			wantStr:   "all.children",
		},
	}
	for _, tt := range tests {
		t.Run(tt.searchKey, func(t *testing.T) {
			_, wanted := sanitizeINIKey(strings.Split(tt.searchKey, "."))
			require.Equal(t, tt.wantStr, wanted)
		})
	}
}

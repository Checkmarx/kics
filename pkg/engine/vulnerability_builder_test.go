package engine

import (
	"fmt"
	"reflect"
	"testing"

	"github.com/Checkmarx/kics/internal/tracker"
	"github.com/Checkmarx/kics/pkg/detector"
	"github.com/Checkmarx/kics/pkg/model"
	"github.com/stretchr/testify/require"
)

// TestMapKeyToString tests the functions [MapKeyToString()] and all the methods called by them
func TestMapKeyToString(t *testing.T) {
	testCases := []struct {
		payload  interface{}
		expected string
	}{
		{
			payload:  "test",
			expected: "test",
		},
		{
			payload:  123,
			expected: "123",
		},
		{
			payload:  0.123,
			expected: "0.123",
		},
		{
			payload:  false,
			expected: "false",
		},
		{
			payload:  nil,
			expected: "null",
		},
	}

	for i, testCase := range testCases {
		t.Run(fmt.Sprintf("mapKeyToString-%d", i), func(t *testing.T) {
			v, err := mapKeyToString(map[string]interface{}{"key": testCase.payload}, "key", false)
			require.Nil(t, err)
			require.Equal(t, testCase.expected, *v)
		})
	}
	for i, testCase := range testCases {
		t.Run(fmt.Sprintf("mapKeyToString-%d", i), func(t *testing.T) {
			_, err := mapKeyToString(map[string]interface{}{"t": testCase.payload}, "key", false)
			require.Error(t, err)
		})
	}
}

// Test_mergeWithMetadata tests the functions [mergeWithMetadata()] and all the methods called by them
func Test_mergeWithMetadata(t *testing.T) {
	type args struct {
		base       map[string]interface{}
		additional map[string]interface{}
	}
	tests := []struct {
		name string
		args args
		want map[string]interface{}
	}{
		{
			name: "mergeWithMetadata",
			args: args{
				base: map[string]interface{}{
					"key": "123",
				},
				additional: map[string]interface{}{
					"key": "teste",
				},
			},
			want: map[string]interface{}{
				"key": "123",
			},
		},
		{
			name: "mergeWithMetadata_2",
			args: args{
				base: map[string]interface{}{
					"key": "123",
				},
				additional: map[string]interface{}{
					"r": "teste2",
				},
			},
			want: map[string]interface{}{
				"key": "123",
				"r":   "teste2",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := mergeWithMetadata(tt.args.base, tt.args.additional); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("mergeWithMetadata() = %v, want %v", got, tt.want)
			}
		})
	}
}

// Test_mustMapKeyToString tests the functions [mustMapKeyToString()] and all the methods called by them
func Test_mustMapKeyToString(t *testing.T) {
	type args struct {
		m   map[string]interface{}
		key string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "mustMapKeyToString",
			args: args{
				m: map[string]interface{}{
					"key": 123,
				},
				key: "key",
			},
			want: "123",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := mustMapKeyToString(tt.args.m, tt.args.key)
			require.Equal(t, tt.want, *got)
		})
	}
}

// Test_ptrStringToString tests the functions [ptrStringToString()] and all the methods called by them
func Test_ptrStringToString(t *testing.T) {
	type args struct {
		v string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "ptrStringToString",
			args: args{
				v: "123",
			},
			want: "123",
		},
		{
			name: "ptrStringToString_empty",
			args: args{
				v: "nil",
			},
			want: "",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.args.v == "nil" {
				if got := ptrStringToString(nil); got != tt.want {
					t.Errorf("ptrStringToString() = %v, want %v", got, tt.want)
				}
			} else {
				if got := ptrStringToString(&tt.args.v); got != tt.want {
					t.Errorf("ptrStringToString() = %v, want %v", got, tt.want)
				}
			}
		})
	}
}

// TestDefaultVulnerabilityBuilder tests the functions [DefaultVulnerabilityBuilder] and all the methods called by them
func TestDefaultVulnerabilityBuilder(t *testing.T) {
	type args struct {
		ctx     *QueryContext
		v       interface{}
		tracker Tracker
	}
	tests := []struct {
		name    string
		args    args
		want    model.Vulnerability
		wantErr bool
	}{
		{
			name: "DefaultVulnerabilityBuilder",
			args: args{
				tracker: &tracker.CITracker{},
				ctx: &QueryContext{
					scanID: "ScanID",
					query: &preparedQuery{
						metadata: model.QueryMetadata{
							Metadata: map[string]interface{}{
								"key":       "123",
								"severity":  model.SeverityInfo,
								"issueType": "IncorrectValue",
								"searchKey": "testSearchKey",
							},
							Query: "TestQuery",
						},
					},
					files: map[string]model.FileMetadata{
						"testV": {},
					},
				},
				v: map[string]interface{}{
					"documentId": "testV",
				},
			},
			want: model.Vulnerability{
				ID:               0,
				SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
				ScanID:           "ScanID",
				FileID:           "",
				FileName:         "",
				QueryID:          "Undefined",
				QueryName:        "Anonymous",
				QueryURI:         "https://github.com/Checkmarx/kics/",
				Severity:         model.SeverityInfo,
				Line:             -1,
				VulnLines:        []model.CodeLine{},
				IssueType:        "IncorrectValue",
				SearchKey:        "testSearchKey",
				KeyActualValue:   "",
				KeyExpectedValue: "",
				Value:            nil,
				Output:           `{"documentId":"testV","issueType":"IncorrectValue","key":"123","searchKey":"testSearchKey","severity":"INFO"}`,
			},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		insDetector := detector.NewDetectLine(3)
		t.Run(tt.name, func(t *testing.T) {
			got, err := DefaultVulnerabilityBuilder(tt.args.ctx, tt.args.tracker, tt.args.v, insDetector)
			if (err != nil) != tt.wantErr {
				t.Errorf("DefaultVulnerabilityBuilder() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DefaultVulnerabilityBuilder() = %v, want %v", got, tt.want)
			}
		})
	}
}

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComCheckmarxDevIcePkgModel(in *jlexer.Lexer, out *Documents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "document":
			if in.IsNull() {
				in.Skip()
				out.Documents = nil
			} else {
				in.Delim('[')
				if out.Documents == nil {
					if !in.IsDelim(']') {
						out.Documents = make([]Document, 0, 8)
					} else {
						out.Documents = []Document{}
					}
				} else {
					out.Documents = (out.Documents)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Document
					(v1).UnmarshalEasyJSON(in)
					out.Documents = append(out.Documents, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComCheckmarxDevIcePkgModel(out *jwriter.Writer, in Documents) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"document\":"
		out.RawString(prefix[1:])
		if in.Documents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Documents {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Documents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComCheckmarxDevIcePkgModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Documents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComCheckmarxDevIcePkgModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Documents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComCheckmarxDevIcePkgModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Documents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComCheckmarxDevIcePkgModel(l, v)
}
func easyjsonC80ae7adDecodeGithubComCheckmarxDevIcePkgModel1(in *jlexer.Lexer, out *Document) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(Document)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v4 interface{}
			if m, ok := v4.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := v4.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				v4 = in.Interface()
			}
			(*out)[key] = v4
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComCheckmarxDevIcePkgModel1(out *jwriter.Writer, in Document) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v5First := true
		for v5Name, v5Value := range in {
			if v5First {
				v5First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v5Name))
			out.RawByte(':')
			if m, ok := v5Value.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v5Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v5Value))
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Document) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComCheckmarxDevIcePkgModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Document) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComCheckmarxDevIcePkgModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Document) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComCheckmarxDevIcePkgModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Document) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComCheckmarxDevIcePkgModel1(l, v)
}

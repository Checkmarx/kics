version: 2.1 # use CircleCI 2.1
executors:
  circle-machine:
    machine:
      image: ubuntu-1604:201903-01 #circleci/classic:201808-01
      docker_layer_caching: true
  go-container:
    docker:
      - image: circleci/golang:1.14.8
  go-lint:
    docker:
      - image: golangci/golangci-lint:v1.28.1-alpine
    resource_class: small

orbs:
  checkmarx: checkmarx/circleci-kpi-shipper@0.11.0

jobs:
  unit-tests:
    executor: 
      go-container
    working_directory: ~/repo
    steps:
      - checkout
      - run: 
          name: Config GOPRIVATE environment variable
          command: echo "export GOPRIVATE=github.com/checkmarxDev/*" >> $BASH_ENV
      - run:
          name: Config Git credentials
          command: git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: 
          name: go test with coverage
          command: |
            go test ./... -coverprofile cover.out
          no_output_timeout: 2m
      - run:
          name: Check if total coverage is greater then 0
          command: |
          
            CODE_COV=$(go tool cover -func cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
            EXPECTED_CODE_COV=0
            var=$(awk 'BEGIN{ print "'$CODE_COV'"<"'$EXPECTED_CODE_COV'" }')   
            if [ "$var" -eq 1 ];then
              echo "Your code coverage is too low. Coverage precentage is: $CODE_COV"
   
              exit 1
            else
              echo "Your code coverage test passed! Coverage precentage is: $CODE_COV"
              
              exit 0
            fi
            
      - save_cache: # Store cache in the /go/pkg directory
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  lint:
    executor:
      go-lint
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Config GOPRIVATE environment variable
          command: echo "export GOPRIVATE=github.com/checkmarxDev/*" >> $BASH_ENV
      - run:
          name: Config Git credentials
          command: git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Run golangci-lint
          command: golangci-lint run --timeout 1m30s ./...
          no_output_timeout: 2m
      - save_cache: # Store cache in the /go/pkg directory
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  integration-tests:
    executor:
      circle-machine
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Build docker image
          command: docker build --build-arg GIT_USER=${GITHUB_USER} --build-arg GIT_TOKEN=${GITHUB_TOKEN} -t ${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} .
      - run: docker run -d ${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}

  build-and-push:
    executor: circle-machine
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: pip install awscli --upgrade --user
      - run: 
          name: Configure AWS Access Key ID
          command: aws configure set aws_access_key_id ${ACCESS_KEY_ID} --profile default
      - run:
          name: Configure AWS Secret Access Key
          command: aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} --profile default
      - run: 
          name: Configure AWS default region
          command: aws configure set region ${AWS_REGION} --profile default
      - run: 
          name: Login to AWS ECR
          command: |
            # aws ecr get-login returns a login command w/ a temp token
            LOGIN_COMMAND=$(eval $(aws ecr get-login --no-include-email --region ${AWS_REGION} | sed 's|https://||'))
      - run: $LOGIN_COMMAND
      - run:
          name: Build docker image
          command: docker build --build-arg GIT_USER=${GITHUB_USER} --build-arg GIT_TOKEN=${GITHUB_TOKEN} -t ${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} .
      - run:
          name: Tag as staging
          command: docker build --build-arg GIT_USER=${GITHUB_USER} --build-arg GIT_TOKEN=${GITHUB_TOKEN} -t ${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}:staging .
      - run:
          name: Push image to Amazon ECR
          command: |
            docker push ${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}
            
            docker push ${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}:staging


workflows:
  Visibility-workflow:
    jobs:
      - checkmarx/circleci-kpi-shipper
  Test-workflow:
    jobs:
      - unit-tests:
          filters:
            branches:
              ignore:
                - master
          context: AWS
      - lint:
          filters:
            branches:
              ignore:
                - master
          context: AWS
      - integration-tests:
          requires:
            - unit-tests
            - lint
          filters:
            branches:
              ignore:
                - master
          context: AWS
                
  Image-publish-workflow:
    jobs:    
      - build-and-push:
          name: build-and-push
          filters:
            branches:
              only:
                - master
          context: AWS

{
  "Resources": {
    "TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": [
          "",
          [
            "AWS::StackName",
            "-ecs-demo-app"
          ]
        ],
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "httpd:2.4",
            "Memory": 300,
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": "CloudwatchLogsGroup",
                "awslogs-region": "AWS::Region",
                "awslogs-stream-prefix": "ecs-demo-app"
              }
            },
            "MountPoints": [
              {
                "SourceVolume": "my-vol",
                "ContainerPath": "/usr/local/apache2/htdocs"
              }
            ],
            "PortMappings": [
              {
                "ContainerPort": 80
              }
            ],
            "Name": "simple-app",
            "Cpu": 10
          },
          {
            "EntryPoint": [
              "sh",
              "-c"
            ],
            "Essential": false,
            "Memory": 200,
            "Command": [
              "/bin/sh -c \"while true; do echo '\u003chtml\u003e \u003chead\u003e \u003ctitle\u003eAmazon ECS Sample App\u003c/title\u003e\u003c/head\u003e\u003cbody\u003e\u003c/body\u003e\u003c/html\u003e' \u003e bottom; cat top date bottom \u003e /usr/local/apache2/htdocs/index.html ; sleep 1; done\""
            ],
            "Cpu": 10,
            "Image": "busybox",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-stream-prefix": "ecs-demo-app",
                "awslogs-group": "CloudwatchLogsGroup",
                "awslogs-region": "AWS::Region"
              }
            },
            "VolumesFrom": [
              {
                "SourceContainer": "simple-app"
              }
            ],
            "Name": "busybox"
          }
        ],
        "Volumes": [
          {
            "Name": "my-vol"
          }
        ]
      }
    },
    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": "ECSTG"
          }
        ],
        "LoadBalancerArn": "ECSALB",
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "ALB500sAlarmScaleUp": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Period": 60,
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": [
              "ECSALB",
              "LoadBalancerFullName"
            ]
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "AlarmDescription": "Alarm if our ALB generates too many HTTP 500s.",
        "Statistic": "Average",
        "Threshold": 10,
        "AlarmActions": [
          "ServiceScalingPolicy"
        ],
        "Namespace": "AWS/ApplicationELB",
        "MetricName": "HTTPCode_ELB_5XX_Count",
        "EvaluationPeriods": 1
      }
    },
    "service": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "TaskDefinition": "TaskDefinition",
        "Cluster": "ECSCluster",
        "DesiredCount": 1,
        "LoadBalancers": [
          {
            "ContainerName": "simple-app",
            "ContainerPort": 80,
            "TargetGroupArn": "ECSTG"
          }
        ],
        "Role": "ECSServiceRole"
      }
    },
    "EcsSecurityGroupSSHinbound": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": "EcsSecurityGroup",
        "IpProtocol": "tcp",
        "FromPort": 22,
        "ToPort": 22,
        "CidrIp": "0.0.0.0/0"
      }
    },
    "EcsSecurityGroupALBports": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 31000,
        "ToPort": 61000,
        "SourceSecurityGroupId": "EcsSecurityGroup",
        "GroupId": "EcsSecurityGroup",
        "IpProtocol": "tcp"
      }
    },
    "CloudwatchLogsGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 14,
        "LogGroupName": [
          "-",
          [
            "ECSLogGroup",
            "AWS::StackName"
          ]
        ]
      }
    },
    "ECSALB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "30"
          }
        ],
        "Subnets": "SubnetId",
        "SecurityGroups": [
          "EcsSecurityGroup"
        ],
        "Name": "ECSALB"
      }
    },
    "ECSALBListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": "ECSTG"
          }
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "Values": [
              "/"
            ]
          }
        ],
        "ListenerArn": "ALBListener",
        "Priority": 1
      }
    },
    "ContainerInstances": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "IamInstanceProfile": "EC2InstanceProfile",
        "KeyName": "my-ssh-key",
        "UserData": {
          "Fn::Base64": "#!/bin/bash -xe\necho ECS_CLUSTER=${ECSCluster} \u003e\u003e /etc/ecs/ecs.config\nyum install -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}\n"
        },
        "ImageId": "ami-09bee01cc997a78a6",
        "SecurityGroups": [
          "EcsSecurityGroup"
        ],
        "InstanceType": "t2.small"
      }
    },
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "EcsSecurityGroupHTTPinbound": {
      "Properties": {
        "GroupId": "EcsSecurityGroup",
        "IpProtocol": "tcp",
        "FromPort": 80,
        "ToPort": 0,
        "CidrIp": "0.0.0.0/0"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "ECSTG": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "ECSTG",
        "Port": 80,
        "VpcId": "VpcId",
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthyThresholdCount": 2,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 2,
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckTimeoutSeconds": 5
      }
    },
    "ServiceScalingTarget": {
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
      "Properties": {
        "MaxCapacity": 2,
        "MinCapacity": 1,
        "ResourceId": [
          "",
          [
            "service/",
            "ECSCluster",
            "/",
            [
              "service",
              "Name"
            ]
          ]
        ],
        "RoleARN": [
          "AutoscalingRole",
          "Arn"
        ],
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs"
      }
    },
    "AutoscalingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "application-autoscaling.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "service-autoscaling",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "application-autoscaling:*",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm",
                    "ecs:DescribeServices",
                    "ecs:UpdateService"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "EcsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ECS Security Group",
        "VpcId": "VpcId"
      }
    },
    "ECSAutoScalingGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": true
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": "SubnetId",
        "LaunchConfigurationName": "ContainerInstances",
        "MinSize": "1",
        "MaxSize": 4,
        "DesiredCapacity": 2
      }
    },
    "ServiceScalingPolicy": {
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
      "Properties": {
        "PolicyName": "AStepPolicy",
        "PolicyType": "StepScaling",
        "ScalingTargetId": "ServiceScalingTarget",
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "PercentChangeInCapacity",
          "Cooldown": 60,
          "MetricAggregationType": "Average",
          "StepAdjustments": [
            {
              "MetricIntervalLowerBound": 0,
              "ScalingAdjustment": 200
            }
          ]
        }
      }
    },
    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2InstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          "EC2Role"
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Select a VPC that allows instances access to the Internet."
    },
    "SubnetId": {
      "Type": "List\u003cAWS::EC2::Subnet::Id\u003e",
      "Description": "Select at two subnets in your selected VPC."
    }
  }
}
